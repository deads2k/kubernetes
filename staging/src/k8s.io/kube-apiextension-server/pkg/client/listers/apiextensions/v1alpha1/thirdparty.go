/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	apiextensions "k8s.io/kube-apiextension-server/pkg/apis/apiextensions"
	v1alpha1 "k8s.io/kube-apiextension-server/pkg/apis/apiextensions/v1alpha1"
)

// ThirdPartyLister helps list ThirdParties.
type ThirdPartyLister interface {
	// List lists all ThirdParties in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ThirdParty, err error)
	// Get retrieves the ThirdParty from the index for a given name.
	Get(name string) (*v1alpha1.ThirdParty, error)
	ThirdPartyListerExpansion
}

// thirdPartyLister implements the ThirdPartyLister interface.
type thirdPartyLister struct {
	indexer cache.Indexer
}

// NewThirdPartyLister returns a new ThirdPartyLister.
func NewThirdPartyLister(indexer cache.Indexer) ThirdPartyLister {
	return &thirdPartyLister{indexer: indexer}
}

// List lists all ThirdParties in the indexer.
func (s *thirdPartyLister) List(selector labels.Selector) (ret []*v1alpha1.ThirdParty, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThirdParty))
	})
	return ret, err
}

// Get retrieves the ThirdParty from the index for a given name.
func (s *thirdPartyLister) Get(name string) (*v1alpha1.ThirdParty, error) {
	key := &v1alpha1.ThirdParty{ObjectMeta: v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apiextensions.Resource("thirdparty"), name)
	}
	return obj.(*v1alpha1.ThirdParty), nil
}
